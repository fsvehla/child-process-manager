#!/usr/bin/env ruby

require 'child_process_manager'
require 'trollop'

SUB_COMMANDS = ['info', 'kill-stale', 'start']

global_opts = Trollop::options do
  banner "ChildProcessManager CLI interface\n\nSubcommands: info kill-stale start"

  opt :debug, "output debug messages", :short => "-d"

  stop_on SUB_COMMANDS
end

# Further options
cmd = ARGV.shift # get the subcommand

cmd_opts = case cmd
           when 'info', 'kill-stale', 'start' # parse delete options
           else
             Trollop::die "unknown subcommand #{cmd.inspect}"
           end
case cmd
when 'info'
  file = File.expand_path('ChildProcessFile.rb')

  puts '%-25s %5s %s' % ['CHILD PROCESS SPEC', 'PORT', 'STALE PROCESSES']

  ChildProcessManager.load_config(file)
  ChildProcessManager.managed_processes.each do |spec|
    port            = spec.port
    stale_processes = ChildProcessManager::OS::OpenFile.tcp_port(port)

    comment = if stale_processes.any?
                stale_processes.collect { |p| "#{ p.pid } (#{ p.command })" }.join(', ')
              end

    puts '%-25s %5d %s' % [spec.tag, spec.port, comment]
  end
when 'kill-stale'
  file = File.expand_path('ChildProcessFile.rb')

  ChildProcessManager.load_config(file)
  ChildProcessManager.managed_processes.each do |spec|
    port            = spec.port
    stale_processes = ChildProcessManager::OS::OpenFile.tcp_port(port)

    stale_processes.each do |stale|
      puts "Killing stale process #{ stale.pid } (#{ stale.command }) for port #{ port }"

      ChildProcessManager::GracefulKiller.kill(stale.pid, 5)
    end
  end
when 'start'
  ChildProcessManager.debug = global_opts[:debug]

  file = File.expand_path('ChildProcessFile.rb')

  puts "Starting..."

  ChildProcessManager.load_config(file)
  ChildProcessManager.start

  puts
  puts "CTRL-C to stop"

  run = true
  trap('INT') { run = false }

  while run
    sleep 0.1
  end

  ChildProcessManager.reap_all
end

